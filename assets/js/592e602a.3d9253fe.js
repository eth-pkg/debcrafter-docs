"use strict";(self.webpackChunkdebcrafter_docs=self.webpackChunkdebcrafter_docs||[]).push([[760],{5788:(e,r,n)=>{n.d(r,{Iu:()=>d,yg:()=>u});var a=n(1504);function l(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,a)}return n}function t(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){l(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,a,l=function(e,r){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],r.indexOf(n)>=0||(l[n]=e[n]);return l}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),c=function(e){var r=a.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):t(t({},r),e)),n},d=function(e){var r=c(e.components);return a.createElement(s.Provider,{value:r},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},h=a.forwardRef((function(e,r){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),g=c(n),h=l,u=g["".concat(s,".").concat(h)]||g[h]||p[h]||o;return n?a.createElement(u,t(t({ref:r},d),{},{components:n})):a.createElement(u,t({ref:r},d))}));function u(e,r){var n=arguments,l=r&&r.mdxType;if("string"==typeof e||l){var o=n.length,t=new Array(o);t[0]=h;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[g]="string"==typeof e?e:l,t[1]=i;for(var c=2;c<o;c++)t[c]=n[c];return a.createElement.apply(null,t)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9820:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(5072),l=(n(1504),n(5788));const o={sidebar_position:1},t="Creating binary package with debcrafter",i={unversionedId:"tutorial-basics/hello-world-walkthrough",id:"tutorial-basics/hello-world-walkthrough",title:"Creating binary package with debcrafter",description:"In this tutorial, we will explore how to use debcrafter, that simplifies the process of creating Debian packages. By following the steps outlined in this walkthrough, you will be able to create a Debian package.",source:"@site/docs/03-tutorial-basics/hello-world-walkthrough.md",sourceDirName:"03-tutorial-basics",slug:"/tutorial-basics/hello-world-walkthrough",permalink:"/docs/tutorial-basics/hello-world-walkthrough",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03-tutorial-basics/hello-world-walkthrough.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Packaging - Basics",permalink:"/docs/category/packaging---basics"},next:{title:"More complex example",permalink:"/docs/tutorial-basics/complex-base-package"}},s={},c=[{value:"Prerequisite",id:"prerequisite",level:2},{value:"Final Directory Structure",id:"final-directory-structure",level:2},{value:"Walkthrough",id:"walkthrough",level:2},{value:"1. Obtaining the package source",id:"1-obtaining-the-package-source",level:3},{value:"2. Creating packaging directories",id:"2-creating-packaging-directories",level:3},{value:"3. SRS File",id:"3-srs-file",level:3},{value:"4. SSS File",id:"4-sss-file",level:3},{value:"5. SPS File",id:"5-sps-file",level:3},{value:"6. Changelog File",id:"6-changelog-file",level:3},{value:"7. Generating the debian directory",id:"7-generating-the-debian-directory",level:3},{value:"8. Building the .deb package",id:"8-building-the-deb-package",level:3},{value:"9. Test the package",id:"9-test-the-package",level:3},{value:"10. Install/uninstall package",id:"10-installuninstall-package",level:3}],d={toc:c},g="wrapper";function p(e){let{components:r,...n}=e;return(0,l.yg)(g,(0,a.c)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"creating-binary-package-with-debcrafter"},"Creating binary package with debcrafter"),(0,l.yg)("p",null,"In this tutorial, we will explore how to use debcrafter, that simplifies the process of creating Debian packages. By following the steps outlined in this walkthrough, you will be able to create a Debian package."),(0,l.yg)("h2",{id:"prerequisite"},"Prerequisite"),(0,l.yg)("p",null,"You need to be on debian 10 to run debcrafter."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"cd workspace\ngit clone https://github.com/Kixunil/debcrafter.git\ncargo install --path .\n")),(0,l.yg)("p",null,"You also need to install the required dependencies"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"sudo apt install dpkg dpkg-buildpackage debc make\n")),(0,l.yg)("h2",{id:"final-directory-structure"},"Final Directory Structure"),(0,l.yg)("p",null,"Before we dive into the details of using debcrafter, let's take a look at the directory structure you will achieve by the end of this tutorial:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"~/workspace/\n\u251c\u2500\u2500 deb-packages/\n\u2502   \u2514\u2500\u2500 pkg-config/\n\u2502       \u251c\u2500\u2500 hello-world.srs\n\u2502       \u251c\u2500\u2500 hello-world.sps\n\u2502       \u251c\u2500\u2500 hello-world.sss\n\u2502       \u251c\u2500\u2500 hello-world.changelog\n\u2502       \u2514\u2500\u2500 hello-world/\n\u2502           \u2514\u2500\u2500 hello-world-<version-number>/\n\u2502               \u2514\u2500\u2500 debian/\n\u2502                   \u251c\u2500\u2500 changelog\n\u2502                   \u251c\u2500\u2500 compat\n\u2502                   \u251c\u2500\u2500 control\n\u2502                   \u251c\u2500\u2500 hello.install\n\u2502                   \u251c\u2500\u2500 hello.postinst\n\u2502                   \u251c\u2500\u2500 hello.postrm\n\u2502                   \u2514\u2500\u2500 rules\n\u2502\n\u2502\n\u2502\n\u2514\u2500\u2500 hello-world/\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},"    deb-packages/: A directory where you'll organize all the packaging-related files for your Debian package.\n\n        pkg-config/: The working directory where we'll build the \"hello-world\" Debian package.\n\n            hello-world.srs: The Smart Repository Specification (SRS) file.\n\n            hello-world.sps: The Smart Packaging Specification (SPS) file.\n\n            hello-world.sss: The Smart Source Specification (SSS) file.\n\n            hello-world.changelog: The changelog file.\n\n        hello-world/: The Debian directory generated by debcrafter.\n            hello-world-<version-number>/: The Debian directory generated by debcrafter.\n                DEBIAN/: The Debian control directory.\n                      control: The control file.\n                      changelog: The changelog file for the Debian package.\n")),(0,l.yg)("p",null,"If you would like the finished source it, you find it ",(0,l.yg)("a",{parentName:"p",href:"https://github.com/eenagy/deb-packages"},"here")),(0,l.yg)("h2",{id:"walkthrough"},"Walkthrough"),(0,l.yg)("p",null,"We will be constructing a single package that exposes a solitary binary package. However, it's worth noting that debcrafter has the capability to assemble multiple software projects, each of which can expose numerous packages with various configurations."),(0,l.yg)("h3",{id:"1-obtaining-the-package-source"},"1. Obtaining the package source"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"cd ~/workspace\ngit clone https://github.com/eenagy/debhello.git hello-world\n")),(0,l.yg)("h3",{id:"2-creating-packaging-directories"},"2. Creating packaging directories"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"mkdir -p ~/workspace/debian-packaging-files/pkg-config\ncd ~/workspace/debian-packaging-files/pkg-config\n")),(0,l.yg)("h3",{id:"3-srs-file"},"3. SRS File"),(0,l.yg)("p",null,"Create a smart repository configuration file. In this context, each repository corresponds to a single software project, and the SRS file enables the definition of multiple Debian packages derived from a sole repository."),(0,l.yg)("p",null,"Each repository is denoted by the ",(0,l.yg)("inlineCode",{parentName:"p"},"[sources.[repository-name]]")," structure, where the ",(0,l.yg)("inlineCode",{parentName:"p"},"repository-name.sss")," file will specify the packages to be constructed. A repository represents an individual software project and has the flexibility to encompass base, service, and configuration packages within it."),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"hello-world.srs")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-toml"},'# Used for all in control file\nmaintainer = "John Doe <johndoe@example.com>"\n\n# Each source defines a different source directory\n[sources.hello-world]\n# Upstream version\nversion = "0.1"\nsection = "net"\n# Packages available within the source\n# .sps files must be placed in the same directory this file is in\npackages = ["hello-world"] # this will look for hello-world.sss\n\n\n')),(0,l.yg)("h3",{id:"4-sss-file"},"4. SSS File"),(0,l.yg)("p",null,"Generate a Smart Source Specification (SSS) file to define the software you wish to package. However, please note that for this example, we are creating only one binary package:"),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"hello-world.sss")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-toml"},'name = "hello-world"\nvariants = [] # none as we don\'t provide in this case\nbuild-depends = []\npackages = ["hello-world"] # same as the sps file defined above\nskip_debug_symbols = true\n')),(0,l.yg)("p",null,"Within the packages section, the SSS file is configured to look for the ",(0,l.yg)("inlineCode",{parentName:"p"},"hello-world.sps")," file, which provides the specifications for the binary package you intend to create. If we wish to expose multiple packages, we would add multiple packages into the ",(0,l.yg)("inlineCode",{parentName:"p"},"packages")," field."),(0,l.yg)("h3",{id:"5-sps-file"},"5. SPS File"),(0,l.yg)("p",null,"The SPS file will be the lowest level, where we can define what our package will be exposing. In this case a binary package, the simplest package that we can create. A binary package is inferred from the ",(0,l.yg)("inlineCode",{parentName:"p"},"architecture")," field. All the other field are requirements for debian packaging. Each ",(0,l.yg)("inlineCode",{parentName:"p"},".sps")," can expose one package. In later case we can see how can we expose more than 1 package through variants."),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"hello-world.sps")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-toml"},'name = "hello-world" # name of your package\narchitecture = "any" # package architechture, pick debian supported one\nsummary = "Example hello world" # short summary\nconflicts = [] # if this package conflicts with other, you would specify it here\nrecommends = [] # if this package would recommend packages, empty for this case\nsuggests = [] # suggested packages\nadd_files = []\n# long documentation, shown on info command\nlong_doc = """Lorem Ipsum\n"""\n')),(0,l.yg)("h3",{id:"6-changelog-file"},"6. Changelog File"),(0,l.yg)("p",null,"Prepare a changelog file that lists the changes made to your software. This is an essential component of the Debian package."),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"hello-world.changelog")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-txt"},"hello-world (0.1-1) buster; urgency=medium\n\n  * Hello world debian package\n\n -- John Doe <johndoe@example.com>  Sat, 1 Aug 2020 18:51:27 +0100\n\n")),(0,l.yg)("h3",{id:"7-generating-the-debian-directory"},"7. Generating the debian directory"),(0,l.yg)("p",null,"Run ",(0,l.yg)("inlineCode",{parentName:"p"},"debcrafter")," with the SRS, SPS, SSS, and changelog files as inputs. This will generate the Debian directory structure for your package."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"debcrafter hello-world.srs ../hello-world\n")),(0,l.yg)("h3",{id:"8-building-the-deb-package"},"8. Building the .deb package"),(0,l.yg)("p",null,"Use the ",(0,l.yg)("inlineCode",{parentName:"p"},"dpkg-build")," command to build the Debian package from the contents of the Debian directory. Make sure you are in the root directory of your project, which should contain the Debian directory created by ",(0,l.yg)("inlineCode",{parentName:"p"},"debcrafter"),"."),(0,l.yg)("p",null,"Edit ",(0,l.yg)("inlineCode",{parentName:"p"},"hello-world/hello-world-<version>/debian/hello-world.install")," and remove the following"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-txt"},"bin/hello-world /usr/bin\n")),(0,l.yg)("p",null,"dpkg will include the built binary in our debian folder, we do not add this in this case."),(0,l.yg)("p",null,"Open ",(0,l.yg)("inlineCode",{parentName:"p"},"hello-world/hello-world-<version>/debian/rules")," and add the following to the end of the file"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},"override_dh_auto_install:\n    dh_auto_install -- prefix=/usr\n")),(0,l.yg)("p",null,"This will be going to install under the ",(0,l.yg)("inlineCode",{parentName:"p"},"/usr")," directory, instead the default ",(0,l.yg)("inlineCode",{parentName:"p"},"/usr/local"),", which only directories can be installed with debian packages."),(0,l.yg)("p",null,"Let's build the debian package."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"cd ~/workspace/hello-world\ncp -R ~/workspace/deb-packages/hello-world/hello-world-0.1/debian .\ndpkg-buildpackage -us -uc\n")),(0,l.yg)("p",null,"If the ",(0,l.yg)("inlineCode",{parentName:"p"},"dpkg-buildpackage")," succeeds you will end up with the following files at the ",(0,l.yg)("inlineCode",{parentName:"p"},"~/workspace")," directory"),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},"TODO: FIX version differences from the richt text files.")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-text"},"hello-world_0.1-1_amd64.buildinfo\nhello-world_0.1-1_amd64.changes\nhello-world_0.1-1_amd64.deb\nhello-world_0.1-1.dsc\nhello-world_0.1-1.tar.gz\nhello-world-dbgsym_0.1-1_amd64.deb\n")),(0,l.yg)("h3",{id:"9-test-the-package"},"9. Test the package"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"debc hello-world_0.1-1_amd64.changes\n")),(0,l.yg)("p",null,"should output something similar"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-txt"},"\nhello-world-dbgsym_0.1-1_amd64.deb\n----------------------------------\n new Debian package, version 2.0.\n size 3792 bytes: control archive=512 bytes.\n     337 bytes,    12 lines      control\n     106 bytes,     1 lines      md5sums\n Package: hello-world-dbgsym\n Source: hello-world\n Version: 0.1-1\n Auto-Built-Package: debug-symbols\n Architecture: amd64\n Maintainer: John doe <johndoe@example.com>\n Installed-Size: 18\n Depends: hello-world (= 0.1-1)\n Section: debug\n Priority: optional\n Description: debug symbols for hello-world\n Build-Ids: 6673e0826b1e8bd84f511bac7772b2981912744e\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/lib/\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/lib/debug/\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/lib/debug/.build-id/\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/lib/debug/.build-id/66/\n-rw-r--r-- root/root      7376 2020-08-01 17:51 ./usr/lib/debug/.build-id/66/73e0826b1e8bd84f511bac7772b2981912744e.debug\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/share/\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/share/doc/\nlrwxrwxrwx root/root         0 2020-08-01 17:51 ./usr/share/doc/hello-world-dbgsym -> hello-world\n\nhello-world_0.1-1_amd64.deb\n---------------------------\n new Debian package, version 2.0.\n size 2808 bytes: control archive=664 bytes.\n     220 bytes,    10 lines      control\n     128 bytes,     2 lines      md5sums\n     159 bytes,    15 lines   *  postinst             #!/bin/bash\n      95 bytes,    10 lines   *  postrm               #!/bin/bash\n Package: hello-world\n Version: 0.1-1\n Architecture: amd64\n Maintainer: John Doe <johndoe@example.com>\n Installed-Size: 25\n Depends: libc6 (>= 2.2.5)\n Section: net\n Priority: optional\n Description: Example hello world\n  Lorem Ipsum\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/bin/\n-rwxr-xr-x root/root     14440 2020-08-01 17:51 ./usr/bin/hello\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/share/\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/share/doc/\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/share/doc/hello-world/\n-rw-r--r-- root/root       148 2020-08-01 17:51 ./usr/share/doc/hello-world/changelog.Debian.gz\n\n")),(0,l.yg)("p",null,"We can ignore the first package, which is only debug symbols. The interesting things is happening on the last lines of the output."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},"drwxr-xr-x root/root         0 2020-08-01 17:51 ./\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/bin/\n-rwxr-xr-x root/root     14440 2020-08-01 17:51 ./usr/bin/hello\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/share/\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/share/doc/\ndrwxr-xr-x root/root         0 2020-08-01 17:51 ./usr/share/doc/hello-world/\n-rw-r--r-- root/root       148 2020-08-01 17:51 ./usr/share/doc/hello-world/changelog.Debian.gz\n")),(0,l.yg)("p",null,"In this case each file under the ",(0,l.yg)("inlineCode",{parentName:"p"},"debian/hello-world/usr/*")," file will be mapped to the actual ",(0,l.yg)("inlineCode",{parentName:"p"},"/usr/")," file when debian installs the package. You can simply think that the directory content will be copied under ",(0,l.yg)("inlineCode",{parentName:"p"},"/usr"),"."),(0,l.yg)("h3",{id:"10-installuninstall-package"},"10. Install/uninstall package"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"cd ~/workspace\nsudo dpkg -i hello-world_0.1-1_amd64.deb\nhello\n")),(0,l.yg)("p",null,"this should result in"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"Hello, world!\n")),(0,l.yg)("p",null,"You can also check if hello indeed is invoked from the install debian file."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"which hello\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"/usr/bin/hello\n")),(0,l.yg)("p",null,"To uninstall simply"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"sudo dpkg -P hello-world\nhello\n")),(0,l.yg)("p",null,"which indeed"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"bash: command not found: hello\n")))}p.isMDXComponent=!0}}]);